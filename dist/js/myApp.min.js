Parse.initialize("6xK5z0dd13fPSziUDvcLiZTEqjkRc5qQais6zUSo","dgHEctNMXBRjHFAYSSBZ7nnLfbuI46NSQEronPP8");var app=angular.module("myApp",["ngAnimate","parse-angular","nya.bootstrap.select","uiGmapgoogle-maps","geolocation","ui.bootstrap","ui.router"]);app.run(function($rootScope,$location,$state,userManagement){userManagement.userState(),$rootScope.sessionUser=Parse.User.current(),$rootScope.$on("$stateChangeStart",function(event,toState){if(console.log(toState),"divided.orientera"==toState.name||"span.ovningar"==toState.name)console.log("tillåten sida");else if(console.log("förbjuden sida"),!userManagement.userState())return console.log("inne"),void event.preventDefault()})}),app.config(function(uiGmapGoogleMapApiProvider){uiGmapGoogleMapApiProvider.configure({v:"3.17",libraries:""})}),app.config(function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("divided",{url:"/divided",templateUrl:"components/divided.html"}).state("divided.orientera",{url:"/orientera",views:{map:{templateUrl:"components/map.html",controller:"mapCtrl"},list:{templateUrl:"pages/orientera.html",controller:"findMapsCtrl"}}}).state("divided.skolor",{url:"/skolor",views:{map:{templateUrl:"components/map.html",controller:"mapCtrl"},list:{templateUrl:"pages/skolor.html",controller:"schoolCtrl"}}}).state("divided.kartor",{url:"/kartor",views:{map:{templateUrl:"components/map.html",controller:"mapCtrl"},list:{templateUrl:"pages/kartor.html",controller:"uploadMapCtrl"}}}).state("span",{url:"/span",templateUrl:"components/span.html"}).state("span.ovningar",{url:"/ovningar",templateUrl:"pages/ovningar.html"}),$urlRouterProvider.otherwise("/divided/orientera")}),app.service("userManagement",function($rootScope,$state){this.logIn=function(username,password){console.log(username+" : "+password),Parse.User.logIn(username,password,{success:function(user){console.log("login!"),broadCastState(),$state.go("divided.orientera")},error:function(user,error){console.log("ojoj!"),broadCastState()}})},this.logOut=function(){console.log("logut!"),Parse.User.logOut(),$state.go("divided.orientera"),broadCastState()},this.userState=function(){var currentUser=Parse.User.current();return console.log(currentUser),currentUser?(console.log("sann"),broadCastState(),!0):(console.log("falsk"),broadCastState(),!1)};var broadCastState=function(){$rootScope.sessionUser=Parse.User.current(),$rootScope.$broadcast("userState",{user:Parse.User.current()})}}),app.service("mapService",function(){var map={center:{latitude:65.588946,longitude:22.157324},zoom:12,pan:{val:!0}},clickedMarker={},getMap=function(){return map},focusOnParseLocation=function(object){map={center:{latitude:object.attributes.position._latitude,longitude:object.attributes.position._longitude},zoom:12},focusOnLocation(map)},focusOnObjectLocation=function(object){map={center:{latitude:object.lat,longitude:object["long"]},zoom:12},focusOnLocation(map)},focusOnLocation=function(mapObject){return null!=mapObject&&(map=mapObject),map},clickOnMarker=function(object){null!=object&&(clickedMarker=object,console.log("click"))},listenForClick=function(){return null!=clickedMarker?clickedMarker:void 0};return{getMap:getMap,focusOnParseLocation:focusOnParseLocation,focusOnObjectLocation:focusOnObjectLocation,focusOnLocation:focusOnLocation,clickOnMarker:clickOnMarker,listenForClick:listenForClick}}),app.service("markerService",function($filter){var areaMarkers=[],schoolMarkers=[],draggableMarker={},addDraggableMarker=function(object){draggableMarker={coords:{latitude:object.lat,longitude:object["long"]},options:{draggable:!0,labelContent:"Dra mig till rätt position!",labelAnchor:"100 0",labelClass:"marker-labels",icon:"/dev/images/icons/fish.png"}}},removeDraggableMarker=function(){return draggableMarker={}},getDraggableMarker=function(object){return null!=object?draggableMarker=object:null!=draggableMarker?draggableMarker:void 0},addToAreaMarkerArray=function(object){if(null==$filter("filter")(areaMarkers,{id:object.id},!0)[0]){var marker={latitude:object.attributes.position._latitude,longitude:object.attributes.position._longitude,title:object.attributes.name};marker.id=object.id,areaMarkers.push(marker)}},removeFromAreaMarkerArray=function(object){var areaInMarkerArray=$filter("filter")(areaMarkers,{id:object.id},!0)[0];areaInMarkerArray&&areaMarkers.splice(areaMarkers.indexOf(areaInMarkerArray),1)},getAreaMarkerArray=function(){return areaMarkers},addToSchoolMarkerArray=function(object){if(null==$filter("filter")(schoolMarkers,{id:object.id},!0)[0]){var marker={latitude:object.attributes.position._latitude,longitude:object.attributes.position._longitude,title:object.attributes.name};marker.id=object.id,schoolMarkers.push(marker)}},removeFromSchoolMarkerArray=function(object){var schoolInMarkerArray=$filter("filter")(schoolMarkers,{id:object.id},!0)[0];schoolInMarkerArray&&schoolMarkers.splice(schoolMarkers.indexOf(schoolInMarkerArray),1)},getSchoolMarkerArray=function(){return schoolMarkers};return{addDraggableMarker:addDraggableMarker,removeDraggableMarker:removeDraggableMarker,getDraggableMarker:getDraggableMarker,addToAreaMarkerArray:addToAreaMarkerArray,getAreaMarkerArray:getAreaMarkerArray,removeFromAreaMarkerArray:removeFromAreaMarkerArray,addToSchoolMarkerArray:addToSchoolMarkerArray,getSchoolMarkerArray:getSchoolMarkerArray,removeFromSchoolMarkerArray:removeFromSchoolMarkerArray}}),app.directive("emitWhen",function(){return{restrict:"A",link:function(scope,element,attrs){var params=scope.$eval(attrs.emitWhen),event=params.event,condition=params.condition;condition&&scope.$emit(event,condition)}}}),app.factory("scrollTo",function(){return{classId:function(container,anchor){var element=angular.element("#"+anchor);element[0]&&angular.element("."+container).animate({scrollTop:element.offset().top},"slow")},idClass:function(container,anchor){var element=angular.element("."+anchor);element[0]&&angular.element("#"+container).animate({scrollTop:element.offset().top},"slow")}}});var ModalInstanceCtrl=function($scope,$modalInstance,$modal,item){$scope.item=item,$scope.ok=function(){$modalInstance.close($scope)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}};app.controller("findMapsCtrl",function($scope,$modal,$filter,mapService,markerService,scrollTo){var query=new Parse.Query("Areas");query.include("maps"),query.find().then(function(result){angular.forEach(result,function(value,key){null!=value.attributes.position&&markerService.addToAreaMarkerArray(value)}),$scope.areas=result});var query=new Parse.Query("Schools");query.find().then(function(result){angular.forEach(result,function(value,key){null!=value.attributes.position&&markerService.addToSchoolMarkerArray(value)}),$scope.schools=result});var watchClick=function(){$scope.$watch(function(){return mapService.listenForClick()},function(oldValue,newValue){var object=mapService.listenForClick();if(null!=object.key){var obj={id:object.key};obj[object.key]=!0,$scope.openAccordion=obj,scrollTo.classId("rightbar",object.key)}})};$scope.displayMap=function($url){return $url},$scope.focusOnSchool=function(school){mapService.focusOnParseLocation(school)},$scope.name="theNameHasBeenPassed",$scope.showModal=function(url,areaName,mapName){$scope.opts={backdrop:!0,backdropClick:!0,dialogFade:!1,keyboard:!0,templateUrl:"mapPreviewModal.html",controller:ModalInstanceCtrl,resolve:{}},$scope.opts.resolve.item=function(){return angular.copy({previewUrl:url,pdfUrl:"/dev/images/icons/fish.png",areaName:areaName,mapName:mapName})};var modalInstance=$modal.open($scope.opts);modalInstance.result.then(function(){},function(){console.log("Modal Closed")})};var init=function(){$scope.openAccordion={},watchClick()};init(),$scope.$on("$destroy",function(){watchClick()})}),app.controller("uploadMapCtrl",function($scope,$filter,uiGmapGoogleMapApi,mapService,markerService,scrollTo,$timeout){$scope.addMarker=function(obj){var object={lat:obj._latitude,"long":obj._longitude};markerService.addDraggableMarker(object),mapService.focusOnObjectLocation(object),$scope.$watchCollection("draggableMarker.coords",function(newVal,oldVal){_.isEqual(newVal,oldVal)&&console.log("lika")})},$scope.addPositionToArea=function(){var map=mapService.getMap(),obj={lat:map.center.latitude,"long":map.center.longitude};markerService.addDraggableMarker(obj)};var watchClick=function(){$scope.$watch(function(){return mapService.listenForClick()},function(oldValue,newValue){var object=mapService.listenForClick();if(null!=object.key){var obj={id:object.key};obj[object.key]=!0,$scope.openAccordion=obj,scrollTo.classId("rightbar",object.key)}})},watchDraggableMarker=function(){$scope.$watch(function(){return markerService.getDraggableMarker()},function(oldValue,newValue){$scope.draggableMarker=markerService.getDraggableMarker(),$scope.addArea.position=$scope.draggableMarker.coords,console.log("marker moved")})},scrollToArea=function(area){var dataObj={key:area.id},runClickFunc=function(data){data&&$timeout(function(){mapService.clickOnMarker(dataObj),listenForRender()},100)},listenForRender=$scope.$on("newRendered",function(event,data){runClickFunc(data)})};$scope.queryForAreas=function(){var query=new Parse.Query("Areas");query.include("maps"),query.find().then(function(result){$scope.areas=result,console.log("areas updated"),angular.forEach(result,function(value,key){null!=value.attributes.position&&markerService.addToAreaMarkerArray(value)})})},$scope.displayMap=function($url){return $url},$scope.changeLocationOfArea=function(area){markerService.removeFromAreaMarkerArray(area),$scope.addMarker(area.attributes.position)},$scope.saveNewArea=function(){var Area=Parse.Object.extend("Areas"),area=new Area,position=new Parse.GeoPoint($scope.draggableMarker.coords);area.set("name",$scope.addArea.areaName),area.set("position",position),area.set("maps",[]),area.save(null,{success:function(area){console.log("sparad area"),$scope.newAreaPanel={open:!1},markerService.removeDraggableMarker(),markerService.addToAreaMarkerArray(area),$scope.areas.push(area),$scope.addArea.areaName="",scrollToArea(area)},error:function(area,error){console.log("error area")}})},$scope.uploadFile=function(files){var mapfile=new Parse.File("map.png",files[0]);mapfile.save().then(function(){console.log("file saved"),$scope.newMap.uploadedMap=mapfile,$scope.$apply()},function(error){console.log(error)})},$scope.saveMap=function(area){var Map=Parse.Object.extend("Maps"),map=new Map;map.set("name",$scope.newMap.mapName),map.set("difficulty",parseInt($scope.newMap.mapLevel)),map.set("file",$scope.newMap.uploadedMap),map.save(null,{success:function(map){console.log("sparad karta"),area.attributes.maps.push(map),$scope.updateAreaMaps(area,map),$scope.newMap.uploadedMap=null,$scope.newMap.mapName="",$scope.newMap.mapLevel="",$scope.newMap.mapLevel=""},error:function(map,error){console.log("error map")}})},$scope.updateAreaMaps=function(area){area.set("maps",area.attributes.maps),area.save(null,{success:function(area){console.log("sparad karta")},error:function(area,error){console.log("error karta")}})},$scope.updateAreaPosition=function(area){var position=new Parse.GeoPoint($scope.draggableMarker.coords);area.set("position",position),area.save(area,{success:function(area){console.log("Uppdaterat!"),markerService.removeDraggableMarker(),markerService.addToAreaMarkerArray(area)},error:function(area,error){console.log("error area")}})},$scope.deleteMap=function(area,map){area.attributes.maps.splice(area.attributes.maps.indexOf(map),1),map.destroy({success:function(map){$scope.updateAreaMaps(area)},error:function(map,error){}})},$scope.deleteArea=function(area){Parse.Object.destroyAll(area.attributes.maps,{success:function(){area.destroy({success:function(area){console.log("area och kartor deleted"),markerService.removeFromAreaMarkerArray(area);var areaToDelete=$filter("filter")($scope.areas,{id:area.id},!0)[0];$scope.areas.splice($scope.areas.indexOf(areaToDelete),1)},error:function(area,error){console.log("fel")}})},error:function(error){console.error("Error deleting related comments "+error.code+": "+error.message)}})};var init=function(){$scope.addArea={},$scope.newMap={},$scope.newAreaPanel={open:!1},$scope.openAccordion={},$scope.queryForAreas(),watchClick(),watchDraggableMarker()};init()}),app.controller("schoolCtrl",function($scope,uiGmapGoogleMapApi,mapService,markerService,scrollTo,$filter,$timeout){$scope.addMarker=function(obj){var object={lat:obj._latitude,"long":obj._longitude};markerService.addDraggableMarker(object),mapService.focusOnObjectLocation(object),$scope.$watchCollection("draggableMarker.coords",function(newVal,oldVal){_.isEqual(newVal,oldVal)&&console.log("lika")})},$scope.addPositionToSchool=function(){var map=mapService.getMap(),obj={lat:map.center.latitude,"long":map.center.longitude};markerService.addDraggableMarker(obj)};var watchClick=function(){$scope.$watch(function(){return mapService.listenForClick()},function(oldValue,newValue){var object=mapService.listenForClick();if(console.log(object),null!=object.key){var obj={id:object.key};obj[object.key]=!0,$scope.openAccordion=obj,console.log($scope.openAccordion),scrollTo.classId("rightbar",object.key)}})},watchDraggableMarker=function(){$scope.$watch(function(){return markerService.getDraggableMarker()},function(oldValue,newValue){$scope.draggableMarker=markerService.getDraggableMarker(),$scope.addSchool.position=$scope.draggableMarker.coords,console.log("marker moved")})},scrollToSchool=function(school){var dataObj={key:school.id},runClickFunc=function(data){data&&$timeout(function(){mapService.clickOnMarker(dataObj),listenForRender()},100)},listenForRender=$scope.$on("newRendered",function(event,data){runClickFunc(data)})};$scope.queryForSchools=function(){var query=new Parse.Query("Schools");query.include("contactPerson","areas","areas.maps"),query.find().then(function(result){$scope.schools=result,angular.forEach(result,function(value,key){null!=value.attributes.position&&markerService.addToSchoolMarkerArray(value)})})},$scope.changeLocationOfSchool=function(school){markerService.removeFromSchoolMarkerArray(school),$scope.addMarker(school.attributes.position)},$scope.saveNewSchool=function(school,contactPerson,newSchoolForm){var School=Parse.Object.extend("Schools"),ContactPerson=Parse.Object.extend("ContactPerson"),newContactPerson=new ContactPerson;newContactPerson.set("name",$scope.contactPerson.name),newContactPerson.set("phoneNumber",$scope.contactPerson.phoneNumber),newContactPerson.set("email",$scope.contactPerson.email);var school=new School,position=new Parse.GeoPoint($scope.draggableMarker.coords);school.set("name",$scope.addSchool.schoolName),school.set("position",position),school.set("contactPerson",newContactPerson),school.save(null,{success:function(school){console.log("sparad school"),$scope.newSchoolPanel={open:!1},markerService.removeDraggableMarker(),markerService.addToSchoolMarkerArray(school),$scope.addSchool.schoolName="",$scope.contactPerson.name="",$scope.contactPerson.phoneNumber="",$scope.contactPerson.email="",$scope.schools.push(school),scrollToSchool(school)},error:function(school,error){console.log("error school")}})},$scope.updateSchool=function(school){var position=new Parse.GeoPoint($scope.draggableMarker.coords);console.log(position),0==position.latitude||school.set("position",position),school.attributes.contactPerson.set("name",school.attributes.contactPerson.attributes.name),school.attributes.contactPerson.set("phoneNumber",school.attributes.contactPerson.attributes.phoneNumber),school.attributes.contactPerson.set("email",school.attributes.contactPerson.attributes.email),school.save(school,{success:function(school){console.log("Uppdaterat skolan!"),markerService.removeDraggableMarker(),markerService.addToSchoolMarkerArray(school)},error:function(school,error){console.log("error school")}})},$scope.deleteSchool=function(school){Parse.Object.destroyAll([school.attributes.contactPerson],{success:function(){school.destroy({success:function(school){console.log("school och contactPerson deleted"),markerService.removeFromSchoolMarkerArray(school);var schoolToDelete=$filter("filter")($scope.schools,{id:school.id},!0)[0];$scope.schools.splice($scope.schools.indexOf(schoolToDelete),1)},error:function(school,error){console.log("fel")}})},error:function(error){console.error("Error deleting related comments "+error.code+": "+error.message)}})};var init=function(){$scope.queryForSchools(),$scope.newSchoolPanel={open:!1},$scope.openAccordion={},$scope.addSchool={},$scope.contactPerson={},$scope.showEdit=!1,watchClick(),watchDraggableMarker()};init()}),app.controller("navCtrl",function($scope,$location,$modal,userManagement){$scope.user=!1,$scope.$on("userState",function(data){null==data.targetScope.sessionUser?$scope.user=!1:($scope.user=!0,$scope.$$phase||$scope.$apply())}),$scope.isActive=function(viewLocation){var location=$location.path();return location=location.substring(1),location=location.replace("/","."),viewLocation===location},$scope.logOut=function(){userManagement.logOut(),console.log("utloggad")},$scope.logInModal=function(){$scope.opts={backdrop:!0,backdropClick:!0,dialogFade:!1,keyboard:!0,templateUrl:"/dev/components/loginModal.html",controller:ModalInstanceCtrl,resolve:{}},$scope.opts.resolve.item=function(){return angular.copy({})};var modalInstance=$modal.open($scope.opts);modalInstance.result.then(function(result){userManagement.logIn(result.user.username,result.user.password)},function(){console.log("Modal Closed")})}}),app.controller("mapCtrl",function($scope,uiGmapGoogleMapApi,geolocation,mapService,markerService,$filter){uiGmapGoogleMapApi.then(function(maps){$scope.map=mapService.getMap(),geolocation.getLocation().then(function(data){})}),$scope.markerprops={school:{url:"/dev/images/icons/fish.png"},area:{url:"/dev/images/icons/pin.png"}},$scope.areaMarkers=markerService.getAreaMarkerArray(),$scope.schoolMarkers=markerService.getSchoolMarkerArray(),$scope.draggableMarker=markerService.getDraggableMarker();var watchMap=function(){$scope.$watch(function(){return mapService.focusOnLocation()},function(oldValue,newValue){$scope.map=mapService.focusOnLocation()})},watchDraggableMarker=function(){$scope.$watch(function(){return markerService.getDraggableMarker()},function(oldValue,newValue){$scope.draggableMarker=markerService.getDraggableMarker()})};$scope.markerClick=function(data){mapService.clickOnMarker(data)};var init=function(){watchMap(),watchDraggableMarker()};init()});