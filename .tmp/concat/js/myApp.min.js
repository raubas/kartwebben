Parse.initialize("6xK5z0dd13fPSziUDvcLiZTEqjkRc5qQais6zUSo", "dgHEctNMXBRjHFAYSSBZ7nnLfbuI46NSQEronPP8");
var app = angular.module('myApp', ['ngAnimate', 'parse-angular','nya.bootstrap.select', 'uiGmapgoogle-maps', 'geolocation', 'ui.bootstrap', 'ui.router']);

app.run(function ($rootScope, $location, $state, userManagement) {
 	
 	//Log out user for dev purposes
    //Parse.User.logOut();
 	userManagement.userState();

 	//Save user to rootscope
    $rootScope.sessionUser = Parse.User.current();

    $rootScope.$on('$stateChangeStart', function(event, toState) {
	    // don't check auth on login routes
        console.log(toState);
        if (toState.name == "divided.orientera" || toState.name == "span.ovningar") {
        	console.log('tillåten sida');
        } else {
        	console.log('förbjuden sida');
            if (!userManagement.userState()) {
                console.log('inne');
                event.preventDefault();
                //$state.go('divided.orientera');
                return;
            }
        }
  	});
});

app.config(function(uiGmapGoogleMapApiProvider) {
    uiGmapGoogleMapApiProvider.configure({
        //    key: 'your api key',
        v: '3.17',
        libraries: ''
    });
});


app.config(function($stateProvider, $urlRouterProvider) {
    
    $urlRouterProvider.otherwise('/');
 
    $stateProvider
        .state('divided', {
        	url: '/divided',
        	templateUrl: 'components/divided.html'
        })

        .state('divided.orientera', {
        	url: '/orientera',
    		views: { 
        		'map' : {
            		templateUrl: 'components/map.html',
	            	controller: 'mapCtrl'
            	},
	            'list' : {
	            	templateUrl: 'pages/orientera.html',
	            	controller: 'findMapsCtrl'
	            }
	        } 
        })

        .state('divided.skolor', {
        	url: '/skolor',
    		views: { 
        		'map' : {
            		templateUrl: 'components/map.html',
	            	controller: 'mapCtrl'
            	},
	            'list' : {
	            	templateUrl: 'pages/skolor.html',
	            	controller: 'schoolCtrl'
	            }
	        } 
        })

        .state('divided.kartor', {
        	url: '/kartor',
    		views: { 
        		'map' : {
            		templateUrl: 'components/map.html',
	            	controller: 'mapCtrl'
            	},
	            'list' : {
	            	templateUrl: 'pages/kartor.html',
	            	controller: 'uploadMapCtrl'
	            }
	        } 
        })

        .state('span', {
        	url:'/span',
        	templateUrl: 'components/span.html',
        })

        .state('span.ovningar', {
        	url:'/ovningar',
        	templateUrl: 'pages/ovningar.html',
        })

	$urlRouterProvider.otherwise('/divided/orientera');
 
});

app.service('userManagement', function($rootScope, $state){
	this.logIn = function(username, password){
		console.log(username + ' : ' + password);
		Parse.User.logIn(username, password, {
		  success: function(user) {
		    // Do stuff after successful login.
		    console.log('login!');
		    broadCastState();
		    $state.go('divided.orientera');
		    return;
		  },
		  error: function(user, error) {
		    // The login failed. Check error to see why.
		    console.log('ojoj!');
		    broadCastState();
		    return;
		  }
		});
	}
	
	this.logOut = function(){
		console.log('logut!');
		Parse.User.logOut();
		$state.go('divided.orientera');
		broadCastState();
		return;
	}

	this.userState = function(){
		var currentUser = Parse.User.current();
		console.log(currentUser);
		if (currentUser) {
			console.log('sann');
			broadCastState();
    		return true;
		} else {
			console.log('falsk');
			broadCastState();
    		return false;
		}
	}

	var broadCastState = function(){
		$rootScope.sessionUser = Parse.User.current();
		$rootScope.$broadcast('userState', { user: Parse.User.current() } );
	}
	
});

app.service('mapService', function(){
	//Config map
	var map = 	{ 	center: { latitude: 65.588946, longitude: 22.157324 },
					zoom: 12,
					pan: {val: true}
				};
	var clickedMarker = {};

	//Get map
	var getMap = function(){
		return map;
	};

	//Takes Parse object with location
	var focusOnParseLocation = function(object){
		map = { center: { 	latitude: object.attributes.position._latitude,
							longitude: object.attributes.position._longitude },
				zoom: 12 };
		focusOnLocation(map);
	}

	//Takes object with { lat, long }
	var focusOnObjectLocation = function(object){
		map = { center: { 	latitude: object.lat,
							longitude: object.long },
				zoom: 12 };
		focusOnLocation(map);
	}

	//Listener for map focus events
	var focusOnLocation = function(mapObject){
		if (mapObject != null) {
			map = mapObject;
		};
		return map;
	}

	//Register click-events on markers
	var clickOnMarker = function(object){
		if (object != null) {
			clickedMarker = object;
			console.log('click');
		};
	}

	//Register listener for click-events
	var listenForClick = function(){
		if (clickedMarker != null) {
			return clickedMarker;
		};
	}

	//Expose functions to controllers
	return {
	    getMap: getMap,
	    focusOnParseLocation: focusOnParseLocation,
	    focusOnObjectLocation: focusOnObjectLocation,
	    focusOnLocation: focusOnLocation,
	    clickOnMarker: clickOnMarker,
	    listenForClick: listenForClick

	};

});

app.service('markerService', function ($filter){
	var areaMarkers = [];
	var schoolMarkers = [];
	var draggableMarker = {};

	var addDraggableMarker = function(object) {
		draggableMarker = 	{	coords: { 	latitude: object.lat,
											longitude: object.long },
								options: { 	draggable: true,
											labelContent: 'Dra mig till rätt position!',
							    			labelAnchor: "100 0",
											labelClass: "marker-labels",
											icon: '/dev/images/icons/fish.png' }
							};
	};

	var removeDraggableMarker = function(){
	  return draggableMarker = {};
	};

	var getDraggableMarker = function(object){
		if (object != null) {
			draggableMarker = object;
			return draggableMarker;
		};
		if (draggableMarker != null) {
			return draggableMarker;
		};
	}

	var addToAreaMarkerArray = function(object){
		if ($filter('filter')(areaMarkers, { id: object.id }, true)[0] == null ) {
			var marker = {
					latitude: object.attributes.position._latitude,
					longitude: object.attributes.position._longitude,
					title: object.attributes.name
				};
			marker['id'] = object.id;
			areaMarkers.push(marker);
		}
	};

	var removeFromAreaMarkerArray = function(object){
		//Find current marker, delete from area markers
		var areaInMarkerArray = $filter('filter')(areaMarkers, { id: object.id }, true)[0];
		if (areaInMarkerArray) {
			areaMarkers.splice(areaMarkers.indexOf(areaInMarkerArray), 1);
		};
	};

	var getAreaMarkerArray = function(){
	  return areaMarkers;
	};

	var addToSchoolMarkerArray = function(object){
		if ($filter('filter')(schoolMarkers, { id: object.id }, true)[0] == null ) {
			var marker = {
					latitude: object.attributes.position._latitude,
					longitude: object.attributes.position._longitude,
					title: object.attributes.name
				};
			marker['id'] = object.id;
			schoolMarkers.push(marker);
		}
  	};

  	var removeFromSchoolMarkerArray = function(object){
		//Find current marker, delete from school markers
		var schoolInMarkerArray = $filter('filter')(schoolMarkers, { id: object.id }, true)[0];
		if (schoolInMarkerArray) {
			schoolMarkers.splice(schoolMarkers.indexOf(schoolInMarkerArray), 1);
		};
	};

  	var getSchoolMarkerArray = function(){
  		return schoolMarkers;
  	}
  
	return {
		addDraggableMarker: addDraggableMarker,
		removeDraggableMarker: removeDraggableMarker,
		getDraggableMarker: getDraggableMarker,
		addToAreaMarkerArray: addToAreaMarkerArray,
		getAreaMarkerArray: getAreaMarkerArray,
		removeFromAreaMarkerArray: removeFromAreaMarkerArray,
		addToSchoolMarkerArray: addToSchoolMarkerArray,
		getSchoolMarkerArray: getSchoolMarkerArray,
		removeFromSchoolMarkerArray: removeFromSchoolMarkerArray
	};

});

app.directive('emitWhen', function () {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            var params = scope.$eval(attrs.emitWhen),
                event = params.event,
                condition = params.condition;
            if (condition) {
                scope.$emit(event, condition);
            }
        }
    };
});

app.factory('scrollTo', function (){
	return {
		classId: function(container, anchor){
		    var element = angular.element('#'+anchor);
		    if (element[0]) {
		    	angular.element('.'+container).animate({scrollTop: element.offset().top}, "slow");
		    };
		},
		idClass: function(container, anchor){
			var element = angular.element('.'+anchor);
			if (element[0]) {
				angular.element('#'+container).animate({scrollTop: element.offset().top}, "slow");
			};
		}
	};
});



var ModalInstanceCtrl = function($scope, $modalInstance, $modal, item) {
    
	$scope.item = item;

	$scope.ok = function () {
		$modalInstance.close($scope);
	};

	$scope.cancel = function () {
		$modalInstance.dismiss('cancel');
	};
}

app.controller('findMapsCtrl', function ($scope, $modal, $filter, mapService, markerService, scrollTo){

	
	//Get areas from db
	var query = new Parse.Query("Areas");
	query.include("maps");
	query.find().then(function(result){
		angular.forEach(result, function(value, key){
			//Nullcheck for position attribute due to fucked up db
			if (value.attributes.position != null) {
				//Push to map using service
				markerService.addToAreaMarkerArray(value);
			};
		});
		//Save areas to scope
		$scope.areas = result;
	});
	
	//Get schools from db
	var query = new Parse.Query("Schools");
	query.find().then(function (result){
		angular.forEach(result, function(value, key){
			//Nullcheck for position attribute due to fucked up db
			if (value.attributes.position != null) {
				//Push to map using service
				markerService.addToSchoolMarkerArray(value);
			};
		});
		$scope.schools = result;
	});

	
	//Listen for map events
	var watchClick = function(){
		$scope.$watch(function () {
        	return mapService.listenForClick();
    	}, function (oldValue, newValue) {
			var object = mapService.listenForClick();
			if (object.key != null) {
				var obj = { id: object.key };
				obj[object.key] = true;
				//Set open accordion
				$scope.openAccordion = obj;
				//Scroll to area
				scrollTo.classId('rightbar', object.key);
			};
    	});
	}

	$scope.displayMap = function($url){
		return $url;
	}

	$scope.focusOnSchool = function(school){
		mapService.focusOnParseLocation(school);
	}

	//Open modal for preview
	$scope.name = 'theNameHasBeenPassed';
	
	$scope.showModal = function(url, areaName, mapName) {
	  
	  $scope.opts = {
		  backdrop: true,
		  backdropClick: true,
		  dialogFade: false,
		  keyboard: true,
		  templateUrl : 'mapPreviewModal.html',
		  controller : ModalInstanceCtrl,
		  resolve: {} // empty storage
	    };
	    
	  
	  $scope.opts.resolve.item = function() {
	      return angular.copy({	previewUrl: url,
	      						pdfUrl: '/dev/images/icons/fish.png',
	      						areaName: areaName,
	      						mapName: mapName }); // pass name to Dialog
	  }
	  
	    var modalInstance = $modal.open($scope.opts);
	    
	    modalInstance.result.then(function(){
	      //on ok button press 
	    },function(){
	      //on cancel button press
	      console.log("Modal Closed");
	    });
	}; 

		//Init controller
	var init = function () {
		$scope.openAccordion = {};
		watchClick();
	};

	//Init function
	init();

	//Remove watchers when view is unloaded
	$scope.$on("$destroy", function(){
        watchClick();
    });


});
app.controller('uploadMapCtrl', function ($scope, $filter, uiGmapGoogleMapApi, mapService, markerService, scrollTo, $timeout){


	//Config marker after click on map, updates coords for clickedlocation
	$scope.addMarker = function (obj) {
		//Set marker at clicked location
		var object = { 	lat: obj._latitude,
						long: obj._longitude };
		markerService.addDraggableMarker(object);
		mapService.focusOnObjectLocation(object);

		//Watch for new location
		$scope.$watchCollection("draggableMarker.coords", function (newVal, oldVal) {
		  if (_.isEqual(newVal, oldVal))
		    console.log('lika');
		    return;
		});
		
	};

	//Place draggable marker on map
	$scope.addPositionToArea = function () {
		var map = mapService.getMap();
		var obj = { lat: map.center.latitude,
					long: map.center.longitude };
		markerService.addDraggableMarker(obj);
	}

	//Listen for map click-events
	var watchClick = function(){
		$scope.$watch(function () {
        	return mapService.listenForClick();
    	}, function (oldValue, newValue) {
			var object = mapService.listenForClick();
			if (object.key != null) {
				var obj = { id: object.key };
				obj[object.key] = true;
				//Set open accordion
				$scope.openAccordion = obj;
				//Scroll to area
				scrollTo.classId('rightbar', object.key);
			};
    	});
	}

	//Listen for when draggable marker moves
	var watchDraggableMarker = function(){
		$scope.$watch(function () {
        	return markerService.getDraggableMarker();
    	}, function (oldValue, newValue) {
        	$scope.draggableMarker = markerService.getDraggableMarker();
        	$scope.addArea.position = $scope.draggableMarker.coords;
        	console.log('marker moved');
    	});
	}

	var scrollToArea = function(area){
		//Set data object for markerClick-function
		var dataObj = {key: area.id};
		//Internal function to call markerclick after query + DOM-update
		var runClickFunc = function (data){
			if(data){
				//Timeout to wait for DOM-update
				$timeout(function(){
					mapService.clickOnMarker(dataObj);
					//Unregister scope.on-event
					listenForRender();
				}, 100);
			}
		};
		//Register listener for when all elements are added to rightbar
		var listenForRender = $scope.$on('newRendered', function(event, data) { runClickFunc(data); });
	}


	$scope.queryForAreas = function () {
		//Query for areas with maps
		var query = new Parse.Query("Areas");
		query.include("maps");
		query.find().then(function(result){
			//Save results to scope
			$scope.areas = result;
			console.log('areas updated');
			angular.forEach(result, function(value, key){
				//Nullcheck for position attribute due to fucked up db
				if (value.attributes.position != null) {
					//Push to map using service
					markerService.addToAreaMarkerArray(value);
				};
			});
		});

	}

	//Return url-string from parse-url
	$scope.displayMap = function($url){
		return $url;
	}

	//Function to place draggable marker for changing of areas location
	$scope.changeLocationOfArea = function (area){
		//Find current marker, delete from area markers and add draggable marker to map
		markerService.removeFromAreaMarkerArray(area);
		$scope.addMarker(area.attributes.position);
	}

	// Saves the new area without any maps.
	$scope.saveNewArea = function(){
		var Area = Parse.Object.extend("Areas");
		var area = new Area();
		var position = new Parse.GeoPoint($scope.draggableMarker.coords);
		area.set("name", $scope.addArea.areaName);
		area.set("position", position);
		area.set("maps", []);
		area.save(null, {
			success: function(area) {
				console.log('sparad area');
				// Close panel 
			  	$scope.newAreaPanel = {
		    		open: false
		    	};

		    	markerService.removeDraggableMarker();
		    	markerService.addToAreaMarkerArray(area);

			    $scope.areas.push(area);
			    $scope.addArea.areaName = "";
			    
			    scrollToArea(area);
			},
			error: function(area, error) {
				//alert('Failed to create new object, with error code: ' + error.message);
				console.log('error area');
			}
		});
	};

	// Saves the new mapfile when the file is uploaded
	$scope.uploadFile = function(files) {
		var mapfile = new Parse.File("map.png", files[0]);
		
		mapfile.save().then(function(){
			console.log("file saved");
			$scope.newMap.uploadedMap = mapfile;
			$scope.$apply();
		}, function(error){
			console.log(error);
		});
	};

	// Save uploaded map to area, and call updateAreaMaps
	$scope.saveMap = function(area) {
		var Map = Parse.Object.extend("Maps");
		var map = new Map();
		map.set("name", $scope.newMap.mapName);
		map.set("difficulty", parseInt($scope.newMap.mapLevel));
		map.set("file", $scope.newMap.uploadedMap);
		map.save(null, {
			success: function(map) {
				console.log('sparad karta');
				area.attributes.maps.push(map);
				$scope.updateAreaMaps(area, map);
				$scope.newMap.uploadedMap = null;
				$scope.newMap.mapName = "";
				$scope.newMap.mapLevel = "";
				$scope.newMap.mapLevel = "";

			},
			error: function(map, error) {
				//alert('Failed to create new object, with error code: ' + error.message);
				console.log('error map');
			}
		});
	}

	// Update area maps new and deleted, called from saveMap and from deleteMap
	$scope.updateAreaMaps = function(area){
		area.set("maps", area.attributes.maps);
		// Kankse inte ska vara null här utan area? men det verkar updatera rätt så kanske inte...
		area.save(null, {
			success: function(area) {
				console.log('sparad karta');
			},
			error: function(area, error) {
				//alert('Failed to create new object, with error code: ' + error.message);
				console.log('error karta');
			}
		});
	} 

	// Updates area postion, called from interface button.
	$scope.updateAreaPosition = function(area){
		var position = new Parse.GeoPoint($scope.draggableMarker.coords);
		area.set("position", position);
		area.save(area, {
			success: function(area) {
				console.log('Uppdaterat!');
				markerService.removeDraggableMarker();
				markerService.addToAreaMarkerArray(area);
			},
			error: function(area, error) {
				//alert('Failed to create new object, with error code: ' + error.message);
				console.log('error area');
			}
		});
	}
	
	// Delets a map inside a area.
	$scope.deleteMap = function(area, map){
		area.attributes.maps.splice(area.attributes.maps.indexOf(map), 1);
		map.destroy({
			success: function(map) {
				$scope.updateAreaMaps(area);
			},
			error: function(map, error){

			}
		});
	}

	//Ta bort area + associerade kartor,
	$scope.deleteArea = function(area){
		Parse.Object.destroyAll(area.attributes.maps, {
			success: function(){
				area.destroy({
					  success: function(area) {
					    // The object was deleted from the Parse Cloud.
					    console.log('area och kartor deleted');
					    // $scope.queryForAreas();
					    markerService.removeFromAreaMarkerArray(area);
					    var areaToDelete = $filter('filter')($scope.areas, { id: area.id }, true)[0];
					    $scope.areas.splice($scope.areas.indexOf(areaToDelete), 1);

					  },
					  error: function(area, error) {
					    // The delete failed.
					    // error is a Parse.Error with an error code and message.
					    console.log('fel');
					  }
					})
			},
			error: function(error) {
      	console.error("Error deleting related comments " + error.code + ": " + error.message);
      }
		});
	}


	//Init controller
	var init = function () {
		//Add area form object
		$scope.addArea = {};
		//New map upload
		$scope.newMap = {};
		// Set var to collapse add new area.
		$scope.newAreaPanel = { open: false };
		//Set which accordion is open
		$scope.openAccordion = {};
		//Query for areas
	   	$scope.queryForAreas();
	   	//Watch variables from map
	   	watchClick();
		watchDraggableMarker();
	};

	//Init function
	init();

});

app.controller('schoolCtrl', function ($scope, uiGmapGoogleMapApi, mapService, markerService, scrollTo, $filter, $timeout){

	//Config marker after click on map, updates coords for clickedlocation
	$scope.addMarker = function (obj) {
		//Set marker at clicked location
		var object = { 	lat: obj._latitude,
						long: obj._longitude };
		markerService.addDraggableMarker(object);
		mapService.focusOnObjectLocation(object);

		//Watch for new location
		$scope.$watchCollection("draggableMarker.coords", function (newVal, oldVal) {
		  if (_.isEqual(newVal, oldVal))
		    console.log('lika');
		    return;
		});
	};

	$scope.addPositionToSchool = function () {
		var map = mapService.getMap();
		var obj = { lat: map.center.latitude,
					long: map.center.longitude };
		markerService.addDraggableMarker(obj);
	}

	//Listen for map click-events
	var watchClick = function(){
		$scope.$watch(function () {
        	return mapService.listenForClick();
    	}, function (oldValue, newValue) {
			var object = mapService.listenForClick();
			console.log(object);
			if (object.key != null) {
				var obj = { id: object.key };
				obj[object.key] = true;
				//Set open accordion
				$scope.openAccordion = obj;
				console.log($scope.openAccordion);
				//Scroll to area
				scrollTo.classId('rightbar', object.key);
			};
    	});
	}

	//Listen for when draggable marker moves
	var watchDraggableMarker = function(){
		$scope.$watch(function () {
        	return markerService.getDraggableMarker();
    	}, function (oldValue, newValue) {
        	$scope.draggableMarker = markerService.getDraggableMarker();
        	$scope.addSchool.position = $scope.draggableMarker.coords;
        	console.log('marker moved');
    	});
	}

	var scrollToSchool = function(school){
		//Set data object for markerClick-function
		var dataObj = {key: school.id};
		//Internal function to call markerclick after query + DOM-update
		var runClickFunc = function (data){
			if(data){
				//Timeout to wait for DOM-update
				$timeout(function(){
					mapService.clickOnMarker(dataObj);
					//Unregister scope.on-event
					listenForRender();
				}, 100);
			}
		};
		//Register listener for when all elements are added to rightbar
		var listenForRender = $scope.$on('newRendered', function(event, data) { runClickFunc(data); });
	}

 	$scope.queryForSchools = function() {
 		var query = new Parse.Query("Schools");
		query.include("contactPerson","areas", "areas.maps");
		query.find().then(function(result){
			$scope.schools = result;
	        angular.forEach(result, function(value, key){
				//Nullcheck for position attribute due to fucked up db
				if (value.attributes.position != null) {
					//Push to map using service
					markerService.addToSchoolMarkerArray(value);
				};
		    });
	    });
 	}
 		

	//Function to place draggable marker for changing of school location
	$scope.changeLocationOfSchool = function (school){
		//Find current marker, delete from school markers and add draggable marker to map
		markerService.removeFromSchoolMarkerArray(school);
		$scope.addMarker(school.attributes.position);
	}

	

	$scope.saveNewSchool = function(school, contactPerson, newSchoolForm){
		var School = Parse.Object.extend("Schools");
		var ContactPerson = Parse.Object.extend("ContactPerson");

		var newContactPerson = new ContactPerson();
		newContactPerson.set("name", $scope.contactPerson.name);
		newContactPerson.set("phoneNumber", $scope.contactPerson.phoneNumber);
		newContactPerson.set("email", $scope.contactPerson.email);

		var school = new School();
		var position = new Parse.GeoPoint($scope.draggableMarker.coords);
		school.set("name", $scope.addSchool.schoolName);
		school.set("position", position);
		school.set("contactPerson", newContactPerson);
		school.save(null, {
			success: function(school) {
				console.log('sparad school');
				// Close panel 
			  	$scope.newSchoolPanel = {
		    		open: false
		    	};
			    
			    markerService.removeDraggableMarker();
		    	markerService.addToSchoolMarkerArray(school);

			    $scope.addSchool.schoolName = "";
			    $scope.contactPerson.name = "";
			    $scope.contactPerson.phoneNumber = "";
			    $scope.contactPerson.email = "";
			    
			    $scope.schools.push(school);
			    
			    scrollToSchool(school);
			},
			error: function(school, error) {
				//alert('Failed to create new object, with error code: ' + error.message);
				console.log('error school');
			}
		});
	};

	// Updates school postion, called from interface button.
	$scope.updateSchool = function(school){
		var position = new Parse.GeoPoint($scope.draggableMarker.coords);
		console.log(position);
		if (position.latitude == 0) {

		} else {
			school.set("position", position);
		}
		school.attributes.contactPerson.set("name", school.attributes.contactPerson.attributes.name);
		school.attributes.contactPerson.set("phoneNumber", school.attributes.contactPerson.attributes.phoneNumber);
		school.attributes.contactPerson.set("email", school.attributes.contactPerson.attributes.email);
		school.save(school, {
			success: function(school) {
				console.log('Uppdaterat skolan!');
				markerService.removeDraggableMarker();
		    	markerService.addToSchoolMarkerArray(school);
				
			},
			error: function(school, error) {
				//alert('Failed to create new object, with error code: ' + error.message);
				console.log('error school');
			}
		});
	}

	//Ta bort skola + associerade kontaktperson,
	$scope.deleteSchool = function(school){
		Parse.Object.destroyAll([school.attributes.contactPerson], {
			success: function(){
				school.destroy({
					  success: function(school) {
					    // The object was deleted from the Parse Cloud.
					    console.log('school och contactPerson deleted');
					    markerService.removeFromSchoolMarkerArray(school);
					    var schoolToDelete = $filter('filter')($scope.schools, { id: school.id }, true)[0];
					    $scope.schools.splice($scope.schools.indexOf(schoolToDelete), 1);
					  },
					  error: function(school, error) {
					    // The delete failed.
					    // error is a Parse.Error with an error code and message.
					    console.log('fel');
					  }
					})
			},
			error: function(error) {
      	console.error("Error deleting related comments " + error.code + ": " + error.message);
      }
		});
	}

 		//Make queries
	var init = function () {
	   $scope.queryForSchools();
	   // Set var to collapse add new school.
		$scope.newSchoolPanel = { open: false };
		//Set which accordion is open
		$scope.openAccordion = {};
		//Set varible to scope for a marker on the map
		$scope.addSchool = {};
		$scope.contactPerson = {};
		$scope.showEdit = false;
		// $scope.error = "";

	   	//Watch variables from map
	   	watchClick();
		watchDraggableMarker();
	};

	//Init function
	init();
	
});
app.controller('navCtrl', function($scope, $location, $modal, userManagement){
	
	$scope.user = false;
	$scope.$on('userState', function (data) {
		if (data.targetScope.sessionUser == null){
			$scope.user = false;
		}else{
			$scope.user = true;
			//Check for digest/apply
			if(!$scope.$$phase) {
  			//$digest or $apply
  			$scope.$apply();
			}
		}
	});

	$scope.isActive = function(viewLocation) { 
  	var location = $location.path();
		location = location.substring(1);
		location = location.replace("/",".");
  	return viewLocation === location;
  };
	

	$scope.logOut = function(){
		userManagement.logOut();
		console.log('utloggad');
		
	}

	$scope.logInModal = function() {
	  
	  $scope.opts = {
		  backdrop: true,
		  backdropClick: true,
		  dialogFade: false,
		  keyboard: true,
		  templateUrl : '/dev/components/loginModal.html',
		  controller : ModalInstanceCtrl,
		  resolve: {} // empty storage
	    };
	    
	  
	  $scope.opts.resolve.item = function() {
	      return angular.copy({ }); // pass name to Dialog
	  }
	  
	    var modalInstance = $modal.open($scope.opts);
	    
	    modalInstance.result.then(function(result){
	      userManagement.logIn(result.user.username, result.user.password);
	      //on ok button press 
	    },function(){
	      //on cancel button press
	      console.log("Modal Closed");
	    });
	};


});
app.controller('mapCtrl', function ($scope, uiGmapGoogleMapApi, geolocation, mapService, markerService, $filter){

	//Initiate google map on Luleå
	uiGmapGoogleMapApi.then(function (maps) {
		$scope.map = mapService.getMap();
		
		//Focus on user location if enabled
		geolocation.getLocation().then(function(data){
			//Comment to get user location
			//$scope.map = { center: { latitude: data.coords.latitude, longitude: data.coords.longitude }, zoom: 12};
    	});
	});
	

	$scope.markerprops = { 	school: { url: '/dev/images/icons/fish.png'},
							area: 	{ url: '/dev/images/icons/pin.png'}};

	$scope.areaMarkers = markerService.getAreaMarkerArray();
	$scope.schoolMarkers = markerService.getSchoolMarkerArray();
	$scope.draggableMarker = markerService.getDraggableMarker();

	//Listen for map events
	var watchMap = function(){
		$scope.$watch(function () {
        	return mapService.focusOnLocation();
    	}, function (oldValue, newValue) {
        	$scope.map = mapService.focusOnLocation();
    	});
	}

	var watchDraggableMarker = function(){
		$scope.$watch(function () {
        	return markerService.getDraggableMarker();
    	}, function (oldValue, newValue) {
        	$scope.draggableMarker = markerService.getDraggableMarker();
    	});
	}

	$scope.markerClick = function(data){
		mapService.clickOnMarker(data);
	};

	//Init controller
	var init = function () {
	   watchMap();
	   watchDraggableMarker();
	   // check if there is query in url
	   // and fire search in case its value is not empty
	};

	//Init function
	init();

});